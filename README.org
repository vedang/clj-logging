#+title: Structured Logging in Clojure

* What is this project?
This is a template Clojure project showcasing how to configure Log4J2 as the logging backend properly, to output structured logs from the project. These logs can then be consumed by a collector like [[https://vector.dev/][Vector]] and forwarded to a tool like [[https://grafana.com/oss/loki/][Loki]] for visualisation.

* What should the reader do?
1. Copy the ~:dependencies~ into your own project.
2. (Leiningen) Copy the ~:exclusions~ into your own project. This ensures that these libraries are never loaded into your project. Make sure that none of the deps mentioned in the exclusions are explicitly added in your project dependencies.
3. (Leiningen) Copy the ~:jvm-opts~ into your project. Make sure that your deployment playbooks also use these JVM opts (for example, if you are start your application using ~java -jar~).
4. (deps.edn) Copy the ~:logs/prod~ and ~:logs/dev~ aliases in your projects. Use these when launching the REPL.
5. Copy the ~resources/log4j2.xml~ and ~resources/log4j2-test.xml~ files into your resources folder. Make sure that JVM opts explicitly pass the ~log4j2.configurationFile~ option to ensure that the correct file is picked this. Make sure that the ~:test~ profile uses the test configuration file.
6. Review the configuration files and set sensible names in the configuration (override the defaults).

* Gotchas
1. You need to create (=touch=) the logging file that you specify in the ~log4j2~ configuration.

* References used to build this project:
- https://github.com/stuartsierra/log.dev
- https://www.loggly.com/blog/benchmarking-java-logging-frameworks/
- https://logging.apache.org/log4j/2.x/manual/async.html
- https://krishankantsinghal.medium.com/logback-slf4j-log4j2-understanding-them-and-learn-how-to-use-d33deedd0c46
