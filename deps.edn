{:paths ["src" "resources"],
 :deps
 {;;; Logging setup is a complex art. Here are the steps as I
  ;;; understand them at the moment, to set up Log4J2 as the logging
  ;;; backend with proper log library conflict resolution.

  ;; Use log4j2 as the primary logging library
  org.apache.logging.log4j/log4j-api {:mvn/version "2.20.0"}
  org.apache.logging.log4j/log4j-core {:mvn/version "2.20.0"}
  ;; Needed for logging from inside javax.servlet
  org.apache.logging.log4j/log4j-web {:mvn/version "2.20.0"}

  ;; Use clojure.tools.logging as the primary clojure facade
  org.clojure/tools.logging {:mvn/version "1.2.4"}

  ;; Use SLF4j as the primary facade for gathering all logs.
  org.apache.logging.log4j/log4j-slf4j2-impl {:mvn/version "2.20.0"},
  org.slf4j/slf4j-api {:mvn/version "2.0.7"},

  ;; Use LMAX Disruptor to enable Async Logging
  com.lmax/disruptor {:mvn/version "3.4.4"},

  ;;; Redirect everything via the SLF4J API

  ;; Apache Commons logging
  org.slf4j/jcl-over-slf4j {:mvn/version "2.0.7"},
  ;; Log4j 1.x
  org.slf4j/log4j-over-slf4j {:mvn/version "2.0.7"},
  ;; OSGI LogService
  org.slf4j/osgi-over-slf4j {:mvn/version "2.0.7"},
  ;; Java util logging
  org.slf4j/jul-to-slf4j {:mvn/version "2.0.7"}}

 :aliases
 {:logs/prod
  {:jvm-opts
   ["-Dclojure.tools.logging.factory=clojure.tools.logging.impl/log4j2-factory"
    "-Dorg.eclipse.jetty.util.log.class=org.eclipse.jetty.util.log.Slf4jLog"
    "-Dlog4j2.contextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector"
    "-Dlog4j2.configurationFile=log4j2.xml"]}
  :logs/dev
  {:jvm-opts
   ["-Dclojure.tools.logging.factory=clojure.tools.logging.impl/log4j2-factory"
    "-Dorg.eclipse.jetty.util.log.class=org.eclipse.jetty.util.log.Slf4jLog"
    "-Dlog4j2.contextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector"
    "-Dlog4j2.configurationFile=log4j2-test.xml"]}}}
